#!/usr/bin/perl
# RPD - Radio Playing Daemon
# Copyright (C) 2010 Magnus Woldrich <trapd00r@trapd00r.se>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################

our $APP     = 'Radio Playing Daemon';
our $VERSION = 0.3;

use strict;
use Radiod::URI qw(geturi listchans);
use Working::Daemon;

my $chan = shift;

my $log      = "$ENV{HOME}/.mplayer/rpd.log";
my $fifo     = "$ENV{HOME}/.mplayer/rpd.fifo";
my $pidfile  = '/tmp/rpd.pid';
my $append   = 0;
my $cmd      = 'mplayer -cache 400 -identify -idle ';
my $cmd_opt  = "-slave -input file=$fifo";
my $chan_url = undef;

if(!-p $fifo) {
  require POSIX;
  POSIX::mkfifo($fifo, 0666) or die "Cant mkfifo $fifo: $!";
}

if($chan eq '-l' or $chan eq '--list') {
  listchans();
  exit 0;
}

if(defined(geturi($chan))) {
  play(geturi($chan));
}

else {
  if(!$chan) { # no args
    usage();
  }
  else { # arg is invalid
    # We have already shifted of a value from @ARGV
    printf("Invalid argument%s\n",  (@ARGV > 0) ? 's' : '');
  }
}

sub play {
  my $station = shift;
  croak("Provide a station") unless $station;
  daemonize();
  if($append != 0) {
    system("$cmd $cmd_opt $chan_url &>> $log");
  }
  else {
    system("$cmd $cmd_opt $chan_url &> $log");
  }
}

sub usage {
  print << "USAGE";
  $APP $VERSION
  Usage: rpd [OPTIONS] (STATION)

  OPTIONS
    -l, --list     list channels

USAGE
}

sub daemonize {
  open(my $pid, '>', $pidfile) or croak("Cant create pidfile $pidfile");
  print $pid $$;
  close($pid);

  my $daemon = Working::Daemon->new;
  $daemon->name('Radio Playing Daemon');
  $daemon->do_action;
}
