#!/usr/bin/perl
use strict;
use LWP::Simple;
use XML::Simple;
use Getopt::Long;
use Data::Dumper;

my $xml = XMLin(get("http://api.sr.se/api/channels/channels.aspx"));
$xml = $xml->{channel};
my $npurl = "http://api.sr.se/api/rightnowinfo/Rightnowinfo.aspx?unit=";
my $chanlist = './channelids.csv';

our $optChan = 2576;

my %channels;
open my $fh, '<', $chanlist or die "Cant open $chanlist: $!";
while(my $chinfo = <$fh>) {
  chomp($chinfo);
  my ($name, $id) = split(/,/, $chinfo);
  $name = lc($name);
  $channels{$name} = $id;
}



sub getID {
  shift;
  my $name = shift or die;# || np($optChan),npNext($optChan);exit 0;
  $optChan = $channels{$name};
  np($optChan);npNext($optChan);
}
np($optChan), npNext($optChan) if !@ARGV;
GetOptions(
  'help'    => \&usage,
  'chan:s'  => \&getID,
  'list'    => sub {print "$_\n" for (sort keys %channels);},
#  'all'     => \&npAll,
);

sub np {
  my $chan = shift;
  my $xml = XMLin(get($npurl.$chan)) or sub {print "Error!\n";exit 1;};
  if(ref($xml->{Channel}) ne 'HASH') {
    print "No info available\n";
    exit 1;
  }
  if($xml->{Channel}->{Song} ~~ {}) {
    print "playing: unknown\n";
  }
  else {
    print ' playing: ', $xml->{Channel}->{Song},
          ' (', $xml->{Channel}->{Name}, ")\n";
  }
}

sub npNext {
  my $chan = shift;
  my $xml = XMLin(get($npurl.$chan));
  if(ref($xml->{Channel} ne 'HASH')) {
    print "No info available\n";
    exit 1;
  }
  if($xml->{Channel}->{Song} ~~ {}) {
    print "playing: unknown\n";
  }
  else {
    print 'upcoming: ', $xml->{Channel}->{NextSong},
          ' (', $xml->{Channel}->{Name}, ")\n";
  }
}

#foreach my $chname(sort(keys(%{$xml}))) {
#  my $id = $xml->{$chname}->{id}; 
#  my $xml2 = XMLin(get("$npurl$id"));
#  my $title = $xml2->{Channel}->{SongTitle};
#  my $artist = $xml2->{Channel}->{Artist};
#  my $nowplaying = sprintf(
#    "\033[38;5;102m%s\033[0m by \033[38;5;105m%s\033[0m", $title, $artist);
#  if(ref($artist or $title)) {
#    $nowplaying = "";
#  }
#
#  printf("%5d \033[38;5;100m%20s\033[0m %s\n",
#    $id, $chname, $nowplaying);
#}


sub usage {
  print << "USAGE";
  srnp [OPTIONS]
  OPTIONS
    -chan   channel to operate on
    -list   list available channels

USAGE
exit 0;
}
